#!/usr/bin/env ruby
#
# Popcorn task: https://docs.google.com/document/d/1r5qMdWSenph3mAvSUyGYCquDgJquOngBBef8zzNNaZk/edit

lib_path = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift(lib_path) unless $LOAD_PATH.include?(lib_path)

require 'optionparser'
require 'ostruct'
require 'source_readers/base'
require 'source_readers/yaml'
require 'network'
require 'node'

ARGV << '-h' if ARGV.empty?

options = OpenStruct.new
options.file = 'network.yml'
options.reader = :yaml
options.min_length = 3
options.words = []

OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"
  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end

  opts.on('-r', '--reade TYPE', [:yaml], 'Select source reader') do |r|
    options.reader = r
  end

  opts.on('-f', '--file FILE', 'File path with network configuration') do |f|
    options.file = f
  end

  opts.on(
    '-l', '--length [LENGTH]',
    Integer, 'Minimum length for generated word'
  ) { |l| options.min_length = l }

  opts.on('-w', '--words x,y,z', Array, 'Words to validate') do |w|
    options.words = w
  end
end.parse!

def run(options) # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
  case options.reader
  when :yaml
    reader = SourceReaders::Yaml.new(yaml_file: options.file)
  else
    abort "Invalid reader option: ##{options.reader}"
  end

  network = Popcorn::Network.new(source_reader: reader)
  words = network.words(options.min_length)

  if options.words.empty?
    puts "\tGenerated words with minimum length" \
         " #{options.min_length} characters:\n"

    words.each { |w| puts w }
  else
    puts "\n\tChecking validation for words: #{options.words.join(', ')}."
    puts "\tFollowing words are valid and" \
         " can be generated with provided network:\n"

    (words & options.words.uniq).each { |w| puts w }
  end
end

begin
  run(options)
rescue StandardError => e
  abort "Error: #{e.message}"
end
